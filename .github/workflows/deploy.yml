name: Deploy to Server

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          # Build the Docker image
          docker build -t email-sender:latest .
          
          # Save the image as a tar file for transfer
          docker save email-sender:latest -o email-sender.tar

      - name: Create deployment package
        run: |
          # Create a deployment package with necessary files
          mkdir -p deployment-package
          
          # Copy essential files for deployment
          cp docker-compose.yml deployment-package/
          cp deploy.sh deployment-package/
          cp email-sender.tar deployment-package/
          
          # Copy environment template if it exists
          if [ -f .env.example ]; then
            cp .env.example deployment-package/
          fi
          
          # Create deployment script that loads the Docker image
          cat > deployment-package/load-and-deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Loading Docker image..."
          docker load -i email-sender.tar
          
          echo "🏃 Running deployment script..."
          chmod +x deploy.sh
          ./deploy.sh
          
          echo "🧹 Cleaning up..."
          rm -f email-sender.tar
          
          echo "✅ Deployment completed successfully!"
          EOF
          
          chmod +x deployment-package/load-and-deploy.sh
          
          # Create a tar archive of the deployment package
          tar -czf deployment-package.tar.gz -C deployment-package .

      - name: Upload deployment package to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: 'deployment-package.tar.gz'
          target: '/tmp/'

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Set deployment directory
            DEPLOY_DIR="/root/apps/email-sender"
            
            # Create deployment directory if it doesn't exist
            sudo mkdir -p $DEPLOY_DIR
            
            # Create a backup of the current deployment (optional)
            if [ -d "$DEPLOY_DIR" ] && [ "$(ls -A $DEPLOY_DIR)" ]; then
              sudo mv $DEPLOY_DIR $DEPLOY_DIR.backup.$(date +%Y%m%d_%H%M%S)
              sudo mkdir -p $DEPLOY_DIR
            fi
            
            # Extract deployment package
            cd $DEPLOY_DIR
            sudo tar -xzf /tmp/deployment-package.tar.gz
            
            # Set proper ownership
            sudo chown -R $USER:$USER $DEPLOY_DIR
            
            # Preserve existing .env if it exists, otherwise create from template
            if [ ! -f .env ] && [ -f .env.example ]; then
              cp .env.example .env
              echo "⚠️  Created .env from template. Please configure it with your production settings."
            fi
            
            # Make scripts executable
            chmod +x *.sh
            
            # Run the deployment
            ./load-and-deploy.sh
            
            # Clean up
            rm -f /tmp/deployment-package.tar.gz

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Check if the application is running
            cd root/apps/email-sender
            
            # Give the application time to start
            sleep 10
            
            # Check if containers are running
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Email Sender API is running successfully!"
              docker-compose ps
              
              # Test health endpoint if available
              if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
                echo "✅ Health check passed!"
              else
                echo "⚠️  Health check endpoint not responding yet (this might be normal during startup)"
              fi
            else
              echo "❌ Deployment verification failed!"
              echo "Container status:"
              docker-compose ps
              echo "Recent logs:"
              docker-compose logs --tail=20
              exit 1
            fi

      - name: Deployment notification
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📦 Docker image built and deployed to server"
          echo "🏃 Deployment executed via ./deploy.sh on VPS"
          echo "📍 Application deployed to: root/apps/email-sender/"
          echo "🌐 Service should be available at: http://${{ secrets.SERVER_HOST }}:3000"
